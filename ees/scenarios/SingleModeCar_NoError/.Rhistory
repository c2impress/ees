# Create sf objects for starting and ending points
points_from <- st_as_sf(joined_df, coords = coords_from, agr = "constant")
points_to <- st_as_sf(joined_df, coords = coords_to, agr = "constant")
# Extract geometries from sf objects
geom_from <- st_as_sfc(points_from)
geom_to <- st_as_sfc(points_to)
View(geom_from)
View(geom_from)
View(geom_to)
View(geom_from)
clear
clc
library(sf)
library(xml2)
library(tidyverse)
# Read building blocks data from GeoJSON
data <- st_read("/Users/hosseinmoradi/Desktop/EgaleoProjectFiles/Debris/SampleDebris.geojson")
Geo_dataframe2 <- as.data.frame(data)
Geo_dataframe <- data.frame(XBLOCK = Geo_dataframe2$XBLOCK,YBLOCK = Geo_dataframe2$YBLOCK)
# Read network roads XML file
doc <- read_xml("/Users/hosseinmoradi/ees/ees/scenarios/Egaleo/Egaleo_network_epsg2100.xml.gz")
# Extract nodes data
nodes <- xml_find_all(doc, "//node") %>%
map_df(~ xml_attrs(.) %>% as.list())
# Extract links data
links <- xml_find_all(doc, "//link") %>%
map_df(~ xml_attrs(.) %>% as.list())
# Create nodes dataframe
nodes_df <- nodes %>%
select(id, x, y)
# Create links dataframe
links_df <- links %>%
select(id, from, to)
# Perform a left join to link nodes and links based on 'from' and 'to' columns
joined_df <- links_df %>%
left_join(nodes_df, by = c("from" = "id")) %>%
left_join(nodes_df, by = c("to" = "id"), suffix = c("_from", "_to"))
View(joined_df)
# Select relevant columns for coordinates and attributes
coords_from <- c("x_from", "y_from")
coords_to <- c("x_to", "y_to")
# Create sf objects for starting and ending points
points_from <- st_as_sf(joined_df, coords = coords_from, agr = "constant")
points_to <- st_as_sf(joined_df, coords = coords_to, agr = "constant")
View(points_from)
View(points_to)
# Perform a left join to link nodes and links based on 'from' and 'to' columns
joined_df <- links_df %>%
left_join(nodes_df, by = c("from" = "id")) %>%
left_join(nodes_df, by = c("to" = "id"), suffix = c("_from", "_to"))
# Select relevant columns for coordinates and attributes
coords_from <- c("x_from", "y_from")
coords_to <- c("x_to", "y_to")
View(joined_df)
# Create sf objects for starting and ending points
points_from <- st_as_sf(joined_df, coords = coords_from, agr = "constant")
points_to <- st_as_sf(joined_df, coords = coords_to, agr = "constant")
View(points_from)
View(points_to)
# Perform left join to link nodes and links based on 'from' and 'to' columns
joined_df <- links_df %>%
left_join(nodes_df, by = c("from" = "id")) %>%
left_join(nodes_df, by = c("to" = "id"), suffix = c("_from", "_to"))
# Select relevant columns for coordinates and attributes
coords_from <- c("x_from", "y_from")
coords_to <- c("x_to", "y_to")
# Create sf objects for starting and ending points
points_from <- st_as_sf(joined_df, coords = coords_from, agr = "constant")
points_to <- st_as_sf(joined_df, coords = coords_to, agr = "constant")
View(points_from)
View(points_from)
View(points_to)
# Extract nodes data
nodes <- xml_find_all(doc, "//node") %>%
map_df(~ xml_attrs(.) %>% as.list())
# Extract links data
links <- xml_find_all(doc, "//link") %>%
map_df(~ xml_attrs(.) %>% as.list())
# Create nodes dataframe
nodes_df <- nodes %>%
select(id, x, y)
# Create links dataframe
links_df <- links %>%
select(id, from, to)
# Perform left join to link nodes and links based on 'from' and 'to' columns
joined_df <- links_df %>%
left_join(nodes_df, by = c("from" = "id")) %>%
left_join(nodes_df, by = c("to" = "id"), suffix = c("_from", "_to"))
# Select relevant columns for coordinates and attributes
coords_from <- c("x_from", "y_from")
coords_to <- c("x_to", "y_to")
# Create sf objects for starting and ending points
points_from <- st_as_sf(joined_df, coords = coords_from, agr = "constant")
points_to <- st_as_sf(joined_df, coords = coords_to, agr = "constant")
View(points_from)
View(points_from)
View(points_to)
library(sf)
library(xml2)
library(tidyverse)
# Read building blocks data from GeoJSON
data <- st_read("/Users/hosseinmoradi/Desktop/EgaleoProjectFiles/Debris/SampleDebris.geojson")
Geo_dataframe2 <- as.data.frame(data)
Geo_dataframe <- data.frame(XBLOCK = Geo_dataframe2$XBLOCK,YBLOCK = Geo_dataframe2$YBLOCK)
# Read network roads XML file
doc <- read_xml("/Users/hosseinmoradi/ees/ees/scenarios/Egaleo/Egaleo_network_epsg2100.xml.gz")
# Extract nodes data
nodes <- xml_find_all(doc, "//node") %>%
map_df(~ xml_attrs(.) %>% as.list())
# Extract links data
links <- xml_find_all(doc, "//link") %>%
map_df(~ xml_attrs(.) %>% as.list())
# Create nodes dataframe
nodes_df <- nodes %>%
select(id, x, y)
# Create links dataframe
links_df <- links %>%
select(id, from, to)
View(links_df)
View(nodes_df)
# Perform left join to link nodes and links based on 'from' and 'to' columns
joined_df <- links_df %>%
left_join(nodes_df, by = c("from" = "id")) %>%
left_join(nodes_df, by = c("to" = "id"), suffix = c("_from", "_to"))
# Select relevant columns for coordinates and attributes
coords_from <- c("x_from", "y_from")
coords_to <- c("x_to", "y_to")
# Create sf objects for starting and ending points
points_from <- st_as_sf(joined_df, coords = coords_from, agr = "constant")
points_to <- st_as_sf(joined_df, coords = coords_to, agr = "constant")
# Extract geometries from sf objects
geom_from <- st_as_sfc(points_from)
geom_to <- st_as_sfc(points_to)
View(points_from)
View(points_to)
# Create LineString geometries connecting from and to points
lines <- st_segmentize(st_combine(c(geom_to, geom_from)), df = joined_df, n = 2)
# Create LineString geometries connecting from and to points
lines <- st_segmentize(st_combine(c(geom_to, geom_from)), df = joined_df)
# Extract geometries from sf objects
geom_from <- st_as_sfc(points_from)
geom_to <- st_as_sfc(points_to)
# Create LineString geometries connecting from and to points
lines <- st_segmentize(st_combine(c(geom_to, geom_from)), df = joined_df, n = 2)
# Create LineString geometries
lines <- st_as_sf(
links_df,
agr = "constant",
coords = c("from_x", "from_y", "to_x", "to_y"),
crs = 4326
)
# Create LineString geometries
lines <- st_as_sf(
links_df,
agr = "constant",
coords = c("from_x", "from_y", "to_x", "to_y"),
crs = 2100
)
# Create LineString geometries
lines <- st_as_sf(
links_df,
agr = "constant",
coords = c("x_from", "y_from", "x_to", "y_to"),
crs = 2100
)
View(links_df)
# Create LineString geometries
lines <- st_as_sf(
joined_df,
agr = "constant",
coords = c("x_from", "y_from", "x_to", "y_to"),
crs = 2100
)
View(joined_df)
# Create LineString geometries
lines <- st_as_sf(
joined_df,
agr = "constant",
coords = c("x_from", "y_from", "x_to", "y_to"),
crs = 2100
)
# Create LineString geometries
lines <- st_as_sf(
joined_df,
agr = "constant",
coords = c("x_to", "y_to", "x_from", "y_from"),
crs = 2100
)
# Create LineString geometries
lines <- st_as_sf(
joined_df,
agr = "constant",
coords = c("x_to", "y_to", "x_from", "y_from"),
crs = 2100
)
library(sf)
library(xml2)
library(tidyverse)
library(dplyr)
# Read building blocks data from GeoJSON
data <- st_read("/Users/hosseinmoradi/Desktop/EgaleoProjectFiles/Debris/SampleDebris.geojson")
Geo_dataframe2 <- as.data.frame(data)
Geo_dataframe <- data.frame(XBLOCK = Geo_dataframe2$XBLOCK,YBLOCK = Geo_dataframe2$YBLOCK)
# Read network roads XML file
doc <- read_xml("/Users/hosseinmoradi/ees/ees/scenarios/Egaleo/Egaleo_network_epsg2100.xml.gz")
# Extract nodes data
nodes <- xml_find_all(doc, "//node") %>%
map_df(~ xml_attrs(.) %>% as.list())
# Extract links data
links <- xml_find_all(doc, "//link") %>%
map_df(~ xml_attrs(.) %>% as.list())
# Create nodes dataframe
nodes_df <- nodes %>%
select(id, x, y)
# Create links dataframe
links_df <- links %>%
select(id, from, to)
# Perform left join to link nodes and links based on 'from' and 'to' columns
joined_df <- links_df %>%
left_join(nodes_df, by = c("from" = "id")) %>%
left_join(nodes_df, by = c("to" = "id"), suffix = c("_from", "_to"))
joined_df <- joined_df %>%
mutate(
from_numeric = as.numeric(from),
to_numeric = as.numeric(to)
)
View(joined_df)
lines <- joined_df %>%
filter(!is.na(from_numeric) & !is.na(to_numeric)) %>%
st_as_sf(
agr = "constant",
coords = c("x_from", "y_from", "x_to", "y_to"),
crs = 2100
)
install.packages("sfheaders")
library(sfheaders)
joined_df <- joined_df %>%
mutate(
from_numeric = as.numeric(from),
to_numeric = as.numeric(to)
)
lines <- joined_df %>%
filter(!is.na(from_numeric) & !is.na(to_numeric)) %>%
sfheaders::sf_linestring(
x = c("x_from", "x_to"),
y = c("y_from", "y_to"),
crs = 2100
)
# Convert 'from' and 'to' columns to numeric
joined_df <- joined_df %>%
mutate(
from_numeric = as.numeric(from),
to_numeric = as.numeric(to)
)
# Filter out rows with NA values in 'from_numeric' and 'to_numeric'
filtered_df <- joined_df %>%
filter(!is.na(from_numeric) & !is.na(to_numeric))
# Create LineString geometries
lines <- sf_linestring(
obj = filtered_df,
x = c("x_from", "x_to"),
y = c("y_from", "y_to")
)
# Create links dataframe
links_df <- links %>%
select(id, from, to)
# Perform left join to link nodes and links based on 'from' and 'to' columns
joined_df <- links_df %>%
left_join(nodes_df, by = c("from" = "id")) %>%
left_join(nodes_df, by = c("to" = "id"), suffix = c("_from", "_to"))
# Convert 'from' and 'to' columns to numeric
joined_df <- joined_df %>%
mutate(
from_numeric = as.numeric(from),
to_numeric = as.numeric(to)
)
# Filter out rows with NA values in 'from_numeric' and 'to_numeric'
filtered_df <- joined_df %>%
filter(!is.na(from_numeric) & !is.na(to_numeric))
lines <- sf_linestring(
obj = filtered_df,
x = c("x_from", "x_to"),
y = c("y_from", "y_to")
)
# Set the CRS of the geometries
st_crs(lines) <- 2100
# Filter out rows with NA values in 'from_numeric' and 'to_numeric'
filtered_df <- joined_df %>%
filter(!is.na(from_numeric) & !is.na(to_numeric))
# Create LineString geometries
lines <- sf_linestring(
obj = filtered_df,
x = c(filtered_df$x_from, filtered_df$x_to),
y = c(filtered_df$y_from, filtered_df$y_to)
)
# Reshape the data to create LineString geometries
lines <- filtered_df %>%
select(id, x_from, y_from, x_to, y_to) %>%
mutate(
geometry = sfheaders::sf_linestring(
x = cbind(x_from, x_to),
y = cbind(y_from, y_to)
)
)
# Filter out rows with NA values in 'from_numeric' and 'to_numeric'
filtered_df <- joined_df %>%
filter(!is.na(from_numeric) & !is.na(to_numeric))
# Create a list of LineString geometries
line_geometries <- lapply(1:nrow(filtered_df), function(i) {
st_linestring(
matrix(
c(filtered_df$x_from[i], filtered_df$x_to[i],
filtered_df$y_from[i], filtered_df$y_to[i]),
ncol = 2, byrow = TRUE
)
)
})
# Create an sf object from the list of geometries
lines_sf <- st_sf(
id = filtered_df$id,
geometry = line_geometries,
crs = 2100
)
# Create a list of LineString geometries
line_geometries <- lapply(1:nrow(filtered_df), function(i) {
st_linestring(
matrix(
c(filtered_df$x_from[i], filtered_df$x_to[i],
filtered_df$y_from[i], filtered_df$y_to[i]),
ncol = 2, byrow = TRUE
)
)
})
View(filtered_df)
View(filtered_df)
View(joined_df)
library(sf)
library(xml2)
library(tidyverse)
library(dplyr)
library(sfheaders)
# Read building blocks data from GeoJSON
data <- st_read("/Users/hosseinmoradi/Desktop/EgaleoProjectFiles/Debris/SampleDebris.geojson")
Geo_dataframe2 <- as.data.frame(data)
Geo_dataframe <- data.frame(XBLOCK = Geo_dataframe2$XBLOCK,YBLOCK = Geo_dataframe2$YBLOCK)
# Read network roads XML file
doc <- read_xml("/Users/hosseinmoradi/ees/ees/scenarios/Egaleo/Egaleo_network_epsg2100.xml.gz")
# Extract nodes data
nodes <- xml_find_all(doc, "//node") %>%
map_df(~ xml_attrs(.) %>% as.list())
# Extract links data
links <- xml_find_all(doc, "//link") %>%
map_df(~ xml_attrs(.) %>% as.list())
# Create nodes dataframe
nodes_df <- nodes %>%
select(id, x, y)
# Create links dataframe
links_df <- links %>%
select(id, from, to)
# Perform left join to link nodes and links based on 'from' and 'to' columns
joined_df <- links_df %>%
left_join(nodes_df, by = c("from" = "id")) %>%
left_join(nodes_df, by = c("to" = "id"), suffix = c("_from", "_to"))
View(joined_data)
View(joined_df)
# Convert joined_df to an sf object with LineString geometries
lines_sf <- st_as_sf(
joined_df,
agr = "constant",
coords = c("x_from", "y_from", "x_to", "y_to"),
crs = 2100
)
# Drop unnecessary columns
joined_df <- joined_df %>%
select(id, x_from = x_from, y_from = y_from, x_to = x_to, y_to = y_to)
View(joined_df)
View(nodes_sf)
View(points_to)
View(nodes_sf)
View(links_sf)
# Drop unnecessary columns
joined_df <- joined_df %>%
select(id, x_from, y_from, x_to, y_to) %>%
st_as_sf(coords = c("x_from", "y_from", "x_to", "y_to"), crs = 2100) %>%
st_combine()
# Drop unnecessary columns
joined_df <- joined_df %>%
select(id, x_from, y_from, x_to, y_to) %>%
st_as_sf(coords = c(("x_from", "y_from"), ("x_to", "y_to")), crs = 2100) %>%
# Drop unnecessary columns
joined_df <- joined_df %>%
select(id, x_from, y_from, x_to, y_to) %>%
st_as_sf(coords = c(("x_from" "y_from"), ("x_to" "y_to")), crs = 2100) %>%
# Drop unnecessary columns
joined_df <- joined_df %>%
select(id, x_from, y_from, x_to, y_to) %>%
st_as_sf(coords = c(c("x_from", "y_from"), c("x_to", "y_to")), crs = 2100) %>%
st_combine()
install.packages("sf")
install.packages("xml2")
install.packages("tidyverse")
library(sf)
library(xml2)
library(tidyverse)
library(dplyr)
install.packages("gridExtra")
install.packages("sfheaders")
library(sfheaders)
library(ggplot2)
# Read building blocks data from GeoJSON
data <- st_read("/Users/hosseinmoradi/Desktop/EgaleoProjectFiles/Debris/SampleDebris.geojson")
Geo_dataframe2 <- as.data.frame(data)
Geo_dataframe <- data.frame(XBLOCK = Geo_dataframe2$XBLOCK,YBLOCK = Geo_dataframe2$YBLOCK, AREA = Geo_dataframe2$AREA, geo = Geo_dataframe2$geometry)
# Read network roads XML file
doc <- read_xml("/Users/hosseinmoradi/ees/ees/scenarios/EgaleoS2/Egaleo_network_epsg2100.xml.gz")
# Assuming your original geometry column is named "geometry" in Geo_dataframe
Geo_dataframe$geometry <- lapply(Geo_dataframe$geometry, function(coords) {
# Ensure that the last point is the same as the first point to close the polygon
if (length(coords) > 2) {
coords <- c(coords, coords[1])  # Add the first point as the last point
}
coords
})
# Create the sf object with the corrected geometry column
Geo_sf <- st_sf(
XBLOCK = Geo_dataframe$XBLOCK,
YBLOCK = Geo_dataframe$YBLOCK,
AREA = Geo_dataframe$AREA,
geometry = st_sfc(Geo_dataframe$geometry, crs = 2100),
crs = 2100
)
# Check the structure of the resulting Geo_sf object
str(Geo_sf)
# Extract nodes data
nodes <- xml_find_all(doc, "//node") %>%
map_df(~ xml_attrs(.) %>% as.list())
# Extract links data
links <- xml_find_all(doc, "//link") %>%
map_df(~ xml_attrs(.) %>% as.list())
# Create nodes dataframe
nodes_df <- nodes %>%
select(id, x, y)
# Create links dataframe
links_df <- links %>%
select(id, from, to)
# Perform left join to link nodes and links based on 'from' and 'to' columns
joined_df <- links_df %>%
left_join(nodes_df, by = c("from" = "id")) %>%
left_join(nodes_df, by = c("to" = "id"), suffix = c("_from", "_to"))
# Check the structure of joined_df
str(joined_df)
# Create a LINESTRING geometry manually
joined_df <- joined_df %>%
mutate(
x_from = as.numeric(x_from),
y_from = as.numeric(y_from),
x_to = as.numeric(x_to),
y_to = as.numeric(y_to)
) %>%
rowwise() %>%
mutate(
geometry = list(st_linestring(matrix(c(x_from, y_from, x_to, y_to), ncol = 2)))
) %>%
ungroup()
# Convert to sf object
joined_sf <- st_as_sf(joined_df)
# Set the CRS if necessary (replace 2100 with your desired CRS)
st_crs(joined_sf) <- 2100
# Check the structure of the resulting joined_sf object
str(joined_sf)
# Create a plot of links in joined_sf
link_plot <- ggplot() +
geom_sf(data = joined_sf, aes(color = id)) +
scale_color_manual(values = rainbow(length(unique(joined_sf$id)))) +
labs(title = "Links in joined_sf")
# Create a plot of Geo_sf
geo_plot <- ggplot() +
geom_sf(data = Geo_sf, fill = "lightblue") +
labs(title = "Geo Data")
# Adjust the size of individual plots
widths <- c(1, 4)  # Increase the width values as needed
heights <- c(1.2, 1.2)  # Increase the height values as needed
# Display the plots side by side
library(gridExtra)
grid.arrange(link_plot, geo_plot, ncol = 2, widths = widths, heights = heights)
# Add a legend
legend("topright", legend = c("Geo Data", "Joined Data"), col = c("lightblue", "red"), lwd = 1)
install.packages("sf")
install.packages("xml2")
install.packages("tidyverse")
library(sf)
library(xml2)
library(tidyverse)
library(dplyr)
install.packages("gridExtra")
install.packages("sfheaders")
library(sfheaders)
library(ggplot2)
# Read building blocks data from GeoJSON
data <- st_read("/Users/hosseinmoradi/Desktop/EgaleoProjectFiles/Debris/SampleDebris.geojson")
Geo_dataframe2 <- as.data.frame(data)
Geo_dataframe <- data.frame(XBLOCK = Geo_dataframe2$XBLOCK,YBLOCK = Geo_dataframe2$YBLOCK, AREA = Geo_dataframe2$AREA, geo = Geo_dataframe2$geometry)
# Read network roads XML file
doc <- read_xml("/Users/hosseinmoradi/ees/ees/scenarios/EgaleoS2/Egaleo_network_epsg2100.xml.gz")
# Assuming your original geometry column is named "geometry" in Geo_dataframe
Geo_dataframe$geometry <- lapply(Geo_dataframe$geometry, function(coords) {
# Ensure that the last point is the same as the first point to close the polygon
if (length(coords) > 2) {
coords <- c(coords, coords[1])  # Add the first point as the last point
}
coords
})
